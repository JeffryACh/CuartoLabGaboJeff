#include "stdafx.h"#include <stdio.h>#include <windows.h>#include <stdlib.h>#include <string.h>#include <string>#include <stdio.h>#include "stdafx.h"#include <iostream>using namespace std;//LISTA ENLAZADA DOBLEtypedef struct TArticulo{	int Codigo;	char Nombre[20];	int Disponible;	double Precio;	TArticulo*Anterior;	TArticulo*Siguiente;}X;typedef TArticulo * PtrTArticulo;void InicializarInventario(PtrTArticulo &Lista){	Lista = NULL;}PtrTArticulo CrearArticulo(int NCodigo, int NDisponible, double NPrecio){	PtrTArticulo Nuevo = new(TArticulo);	char buffer[5];	Nuevo->Codigo = NCodigo;	Nuevo->Disponible = NDisponible;	Nuevo->Precio = NPrecio;	strcpy_s(Nuevo->Nombre,"Pieza") ;	_itoa_s(NCodigo, buffer, 10);	strcat_s(Nuevo->Nombre,buffer);	Nuevo->Anterior = NULL;	Nuevo->Siguiente = NULL;	return Nuevo;}void AgregarFinalInventario(PtrTArticulo &Lista, PtrTArticulo &Nuevo){	PtrTArticulo Aux;	Aux = Lista;	if (Aux == NULL){		Lista = Nuevo;	}	else{		while (Aux->Siguiente != NULL){			Aux = Aux->Siguiente;		}		Aux->Siguiente = Nuevo;		Nuevo->Anterior = Aux;	}}void AgregarInicioInventario(PtrTArticulo &Lista, PtrTArticulo &Nuevo){		if (Lista == NULL){		Lista = Nuevo;	}	else	{		Nuevo->Siguiente = Lista;		Lista->Anterior = Nuevo;		Lista = Nuevo;	}}void Listar_Inicio_a_Final(PtrTArticulo &Lista){	PtrTArticulo Aux;	Aux = Lista;	while (Aux!= NULL){		cout << "[";		cout << Aux->Codigo << ",";		cout << Aux->Nombre << ",";		cout << Aux->Precio << "] - ";		Aux = Aux->Siguiente;	}	system("pause");}void Listar_Final_a_Inicio(PtrTArticulo &Lista){	PtrTArticulo Aux;	Aux = Lista;	while (Aux->Siguiente != NULL)  Aux = Aux->Siguiente;	while (Aux != NULL){		cout << "[";		cout << Aux->Codigo << ",";		cout << Aux->Nombre << ",";		cout << Aux->Precio << "] - ";		Aux = Aux->Anterior;	}	system("pause");}void DestruirInventario(PtrTArticulo &Lista){	PtrTArticulo Aux;	Aux = Lista;	while (Aux != NULL)	{		Lista = Lista->Siguiente;		delete(Aux);		Aux = Lista;	}}//implementar//void BorrarArticulo(PtrTArticulo& Lista, int codigoArticulo)void main() {	// creacion  de variables	PtrTArticulo Nuevo;	PtrTArticulo Abarrotes;// Carga en la lista c'odigos del 1 al 100, luego los lista del inicio al final y luego del final al inicio.  Finalmente destruye la lista.//INICIO PILOTO AGREGANDO AL INICIO EN LISTA DOBLE	InicializarInventario(Abarrotes);	for (int i = 1; i <= 100; i++)	{		Nuevo = CrearArticulo(i, i, i);		AgregarInicioInventario(Abarrotes, Nuevo);	}	system("pause");	system("cls");	cout << "Listando elementos del Inicio al Final de una lista creada con insercion al inicio"<<endl;	Listar_Inicio_a_Final(Abarrotes);	cout << "Listando elementos del Final al Inicio de una lista creada con insercion al inicio" << endl;	Listar_Final_a_Inicio(Abarrotes);	DestruirInventario(Abarrotes);//FIN PILOTO AGREGANDO AL INICIO EN LISTA DOBLE//INICIO PILOTO AGREGANDO AL FINAL EN LISTA DOBLE	InicializarInventario(Abarrotes);	for (int i = 500; i <= 600; i++)	{		Nuevo = CrearArticulo(i, i, i);		AgregarFinalInventario(Abarrotes, Nuevo);	}	system("pause");	system("cls");	cout << "Listando elementos del Inicio al Final de una lista creada con insercion al final" << endl;	Listar_Inicio_a_Final(Abarrotes);	cout << "Listando elementos del Final al Inicio de una lista creada con insercion al final" << endl;	Listar_Final_a_Inicio(Abarrotes);	DestruirInventario(Abarrotes);//FIN PILOTO AGREGANDO AL FINAL EN LISTA DOBLE}