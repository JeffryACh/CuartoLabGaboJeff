/*	Autores:		- Victor Garro Abarca		- Jeffry Araya Chaves		- Gabriel Barrantes Villalobos	FechaDeCreacion: 28/02/2024 17:55	FechaDeUltimaModificacion: 28/02/2024 18:10*/#include <stdio.h>#include <stdlib.h>#include <string.h>using namespace std;/*	Este es un Struct que se encarga de almacenar la informacion de un articulo		- int Codigo: Es el codigo del articulo		- char Nombre[20]: Es el nombre del articulo		- int Disponible: Es la cantidad de articulos disponibles		- float Precio: Es el precio del articulo		- TArticulo *Siguiente: Es un puntero que apunta al siguiente articulo*/typedef struct TArticulo{	int Codigo;	char Nombre[20];	int Disponible;	float Precio;	TArticulo *Siguiente;}*PtrTArticulo; // Se define un puntero de tipo TArticuloint i;  //parametro global/*	Aqui se inicializa la lista de articulos		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos*/void InicializarInventario(PtrTArticulo &Lista){	Lista = NULL;}/*	Aqui se destruye la lista de articulos		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos*/void DestruirInventario(PtrTArticulo &Lista){	PtrTArticulo Aux;	Aux = Lista;	while (Aux != NULL)	{		Lista = Lista->Siguiente;		delete(Aux);		Aux = Lista;	}}/*	Aqui se crea un articulo		- int NCodigo: Es el codigo del articulo		- int NDisponible: Es la cantidad de articulos disponibles		- float NPrecio: Es el precio del articulo		+ PtrTArticulo: Retorna un puntero de tipo TArticulo*/PtrTArticulo CrearArticulo(int NCodigo, int NDisponible, float NPrecio){	PtrTArticulo Pieza = new(TArticulo);	char buffer[5];	Pieza->Codigo = NCodigo;	Pieza->Disponible = NDisponible;	Pieza->Precio = NPrecio;	strcpy_s(Pieza->Nombre, "Pieza");	_itoa_s(NCodigo, buffer, 10);	strcat_s(Pieza->Nombre, buffer);	Pieza->Siguiente = NULL;	return Pieza;}/*	Aqui se agrega un articulo al inicio de la lista		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos		- PtrTArticulo &Nuevo: Es un puntero que apunta al articulo que se va a agregar*/void AgregarInicioInventario(PtrTArticulo &Lista, PtrTArticulo &Nuevo){	Nuevo->Siguiente = Lista;	Lista = Nuevo;}/*	Aqui se agrega un articulo al final de la lista		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos		- PtrTArticulo &Nuevo: Es un puntero que apunta al articulo que se va a agregar*/void AgregarFinalInventario(PtrTArticulo &Lista, PtrTArticulo &Nuevo){	PtrTArticulo Aux;	Aux = Lista;	if (Aux != NULL)	{		while (Aux->Siguiente != NULL)		{			Aux = Aux->Siguiente;		}		Aux->Siguiente = Nuevo;	}	else	{		Lista = Nuevo;	}}/*	Aqui se lista el inventario		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos*/void ListarInventario(PtrTArticulo &Lista){	int Contador = 1;	PtrTArticulo Aux;	Aux = Lista;	while (Aux != NULL)	{		printf(" %d ", Contador);		printf("%d ", Aux->Codigo);		printf("%s ", Aux->Nombre);		printf(" %d ", Aux->Disponible);		printf(" %f\n ", Aux->Precio);		Aux = Aux->Siguiente;		Contador++;	}}/*	Aqui se busca un articulo		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos		- int cual: Es el codigo del articulo que se va a buscar		+ PtrTArticulo: Retorna un puntero de tipo TArticulo*/PtrTArticulo BuscarArticulo(PtrTArticulo &Lista, int cual){	bool encontro = false;	PtrTArticulo Aux;	Aux = Lista;	while (!encontro == true) && (Aux != NULL)	{		if (Aux->Codigo == cual)			encontro = true;		else			Aux = Aux->Siguiente;	}	return Aux;}/*	Aqui se elimina un articulo		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos		- int cual: Es el codigo del articulo que se va a eliminar*/void GuardarInventario(PtrTArticulo Lista){	FILE *archivo;	fopen_s(&archivo, "ARCHIVO.txt", "w+");	if (NULL == archivo){		printf("No se pudo abrir el archivo.");	}	else{		PtrTArticulo AUX = Lista;		while (AUX != NULL){			fprintf(archivo, "%i\n", AUX->Codigo);			fprintf(archivo, "%s\n", AUX->Nombre);			fprintf(archivo, "%i\n", AUX->Disponible);			fprintf(archivo, "%f\n", AUX->Precio);			AUX = AUX->Siguiente;		}	}	fclose(archivo);}/*	Aqui se carga el inventario		- PtrTArticulo &Lista: Es un puntero que apunta a la lista de articulos*/void CargarInventario(PtrTArticulo &Lista){	PtrTArticulo Nuevo;	FILE *archivo;	fopen_s(&archivo, "ARCHIVO.txt", "r");	if (NULL == archivo){		printf("No se pudo abrir el archivo");	}	else{		while (!feof(archivo)){			Nuevo = new(TArticulo);			char Cadena[20];			fscanf_s(archivo, "%i\n", &Nuevo->Codigo);			fscanf_s(archivo, "%s\n", Cadena, 20);			fscanf_s(archivo, "%i\n", &Nuevo->Disponible);			fscanf_s(archivo, "%f\n", &Nuevo->Precio);			strcpy_s(Nuevo->Nombre, Cadena);			Nuevo->Siguiente = NULL;			AgregarFinalInventario(Lista, Nuevo);		}	}	fclose(archivo);}/*	Aqui tenemos la funcion Main que se encarga de probar las funciones		- int argc: Es el numero de argumentos que se pasan al programa		- char* argv[]: Es un arreglo de punteros que apuntan a los argumentos que se pasan al programa*/void main(int argc, char* argv[]){	/*		Separamos el inventario en dos listas	*/	PtrTArticulo Llantas; //Lista de llantas, Puntero que apunta a la lista de llantas	PtrTArticulo Abarrotes; //Lista de abarrotes, Puntero que apunta a la lista de abarrotes	PtrTArticulo Nuevo; //Puntero que apunta a un articulo	PtrTArticulo Prueba; //Puntero que apunta a un articulo	//************************************************************************		InicializarInventario(Abarrotes); //Inicializamos la lista de abarrotes	/*		Se hace un ciclo que agrega 100 articulos a la lista de abarrotes		con un codigo, cantidad y precio que van de 100 a 200. Se agrega al inicio	*/	for (int i = 100; i <= 200; i++)	{		Nuevo = CrearArticulo(i, i, i);		AgregarInicioInventario(Abarrotes, Nuevo);	}	GuardarInventario(Abarrotes); //Guardamos la lista de abarrotes en un archivo	ListarInventario(Abarrotes); //Listamos la lista de abarrotes	DestruirInventario(Abarrotes); //Destruimos la lista de abarrotes	system("cls"); //Limpiamos la pantalla	//*************************PRUEBA DE CARGAR********************************	InicializarInventario(Prueba); //Inicializamos la lista de prueba	CargarInventario(Prueba); //Cargamos la lista de prueba	ListarInventario(Prueba); //Listamos la lista de prueba	system("pause"); //Pausamos el programa	DestruirInventario(Prueba); //Destruimos la lista de prueba	//************************************************************************	InicializarInventario(Abarrotes); //Inicializamos la lista de abarrotes	/*		Se hace un ciclo que agrega 100 articulos a la lista de abarrotes		con un codigo, cantidad y precio que van de 200 a 300. Se agrega al final	*/	for (i = 200; i <= 300; i++)	{		Nuevo = CrearArticulo(i, i, i);		AgregarFinalInventario(Abarrotes, Nuevo);	}	ListarInventario(Abarrotes); //Listamos la lista de abarrotes	Prueba = BuscarArticulo(Abarrotes, 150); //Buscamos el articulo con codigo 150	if (Prueba != NULL) //Si lo encontramos lo mostramos		printf("%i", Prueba->Disponible); //Mostramos la cantidad disponible	else //Si no lo encontramos mostramos un mensaje		printf("no encontrado !!"); //Mostramos un mensaje	Prueba = BuscarArticulo(Abarrotes, 300); //Buscamos el articulo con codigo 300	if (Prueba != NULL) //Si lo encontramos lo mostramos		printf("%i", Prueba->Disponible); //Mostramos la cantidad disponible	else //Si no lo encontramos mostramos un mensaje		printf("no encontrado !!"); //Mostramos un mensaje	DestruirInventario(Abarrotes); //Destruimos la lista de abarrotes	//************************************************************************		InicializarInventario(Llantas); //Inicializamos la lista de llantas	/*		Se hace un ciclo que agrega 100 articulos a la lista de llantas		con un codigo, cantidad y precio que van de 100 a 200. Se agrega al inicio	*/	for (i = 100; i <= 200; i++)	{		Nuevo = CrearArticulo(i, i, i);		AgregarInicioInventario(Llantas, Nuevo);	}	ListarInventario(Llantas); //Listamos la lista de llantas	DestruirInventario(Llantas); //Destruimos la lista de llantas	//************************************************************************	InicializarInventario(Llantas); //Inicializamos la lista de llantas	/*		Se hace un ciclo que agrega 100 articulos a la lista de llantas		con un codigo, cantidad y precio que van de 200 a 300. Se agrega al final	*/	for (i = 200; i <= 300; i++)	{		Nuevo = CrearArticulo(i, i, i);		AgregarFinalInventario(Llantas, Nuevo);	}	ListarInventario(Llantas); //Listamos la lista de llantas	DestruirInventario(Llantas); //Destruimos la lista de llantas}